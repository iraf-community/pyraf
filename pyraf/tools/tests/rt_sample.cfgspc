_task_name_ = string_kw(default='rt_sample')
input = string_kw(default="", triggers='_rule1_', comment='Input files (name, suffix, or @list)', pos=0)
output = string_kw(default='final_drz.fits', comment='Rootname for output drizzled products', pos=1)
mdriztab = boolean_kw(default=True, comment='Use Multidrizzle parameter file specified in header?')
refimage = string_kw(default="", comment='Reference image from which to obtain a WCS')
runfile = string_kw(default="multidrizzle.run", comment='File for logging the script commands', pos=4)
workinplace = boolean_kw(default=no, comment='Work on input files in place? (NOT RECOMMENDED)')
updatewcs = boolean_kw(default=yes, comment='Update the WCS keywords?')
coeffs = string_kw(default="header", comment='Use header-based distortion coefficients?')
context = boolean_kw(default=yes, comment='Create context image during final drizzle?')
clean = boolean_kw(default=no, active_if='_rule1_', comment='Remove temporary files?')
group = string_kw(default="", inactive_if='_rule1_', comment='Single extension or group to be combined/cleaned')
ra = float_or_none_kw(default=None, active_if='_R2_', pos=2, comment='right ascension output frame center in decimal degrees')
dec = float_or_none_kw(default=None, pos=3, comment='declination output frame center in decimal degrees')
shiftfile = string_kw(default="", comment='Shiftfile name')
staticfile = string_kw(default='', comment='Name of (optional) input static bad-pixel mask')
build = boolean_kw(default=no, comment='Create multi-extension output file?')
mode = string_kw(default="all", comment='')

[STEP 1: STATIC MASK]
static = boolean_kw(default=True, triggers='_section_switch_', comment='Create static bad-pixel mask from the data?')
static_sig = float_kw(default=4.0, pos=6, comment='Skip pos-5; Sigma*rms below mode to clip for static mask')

[STEP 2: SKY SUBTRACTION]
skysub = boolean_kw(default=True, triggers='_section_switch_', pos=7, comment='Perform sky subtraction?')
skywidth = float_or_none_kw(default=None, comment='Bin width for sampling sky statistics (in sigma)')
skystat = string_kw(default="median", comment='Sky correction statistics parameter')
skylower = float_or_none_kw(default=None, comment='Lower limit of usable data for sky (always in electrons)')
skyupper = float_or_none_kw(default=None, comment='Upper limit of usable data for sky (always in electrons)')
skyclip = integer_kw(default=5, comment='Number of clipping iterations')
skylsigma = float_kw(default=4., comment='Lower side clipping factor (in sigma)')
skyusigma = float_kw(default=4., comment='Upper side clipping factor (in sigma)')
skyuser = string_kw(default="", comment='KEYWORD indicating a sky subtraction value if done by user.')

[STEP 3: DRIZZLE SEPARATE IMAGES]
_section_ = string_kw(default='', active_if='_rule1_', comment= "en/dis-able whole section")
driz_separate = boolean_kw(default=True, triggers='_section_switch_', comment='Drizzle onto separate output images?')
driz_sep_outnx = float_or_none_kw(default=None, comment="Size of separate output frame's X-axis (pixels)")
driz_sep_outny = float_or_none_kw(default=None, comment="Size of separate output frame's Y-axis (pixels)")
driz_sep_kernel = option_kw("turbo","square","point", "gaussian", "tophat", "lanczos3", default="turbo", comment='Shape of kernel function')
driz_sep_wt_scl = string_kw(default="exptime", comment='Weighting factor for input data image')
driz_sep_scale = float_or_none_kw(default=None, comment='Absolute size of output pixels in arcsec/pixel')
driz_sep_pixfrac = float_kw(default=1., comment='Linear size of drop in input pixels')
driz_sep_rot = float_or_none_kw(default=None, comment="Position Angle of drizzled image's Y-axis w.r.t. North (degrees)")
driz_sep_fillval = string_kw(default=None, comment='Value to be assigned to undefined output points')
driz_sep_bits = integer_kw(default=0, comment='Integer mask bit values considered good')

[STEP 4: CREATE MEDIAN IMAGE]
median = boolean_kw(default=True, triggers='_section_switch_', is_set_by='_rule1_', comment='Create a median image?')
median_newmasks = boolean_kw(default=true, comment='Create new masks when doing the median?')
combine_maskpt = float_kw(default=0.7, comment='Percentage of weight image value below which it is flagged as a bad pixel.')
combine_type = option_kw("minmed","median","sum",default="minmed", comment='Type of combine operation')
combine_nsigma = string_kw(default="4 3", comment='Significance for accepting minimum instead of median')
combine_nlow = integer_kw(default=0, comment='minmax: Number of low pixels to reject')
combine_nhigh = integer_kw(default=0, comment='minmax: Number of high pixels to reject')
combine_lthresh = string_kw(default="INDEF", comment='Lower threshold for clipping input pixel values')
combine_hthresh = string_kw(default="INDEF", comment='Upper threshold for clipping input pixel values')
combine_grow = integer_kw(default=1, comment='Radius (pixels) for neighbor rejection')

[STEP 5: BLOT BACK THE MEDIAN IMAGE]
blot = boolean_kw(default=true, triggers='_section_switch_', comment='Blot the median back to the input frame?')
blot_interp = option_kw("poly5","nearest","linear", "poly3", "sinc",default="poly5", comment='Interpolant (nearest,linear,poly3,poly5,sinc)')
blot_sinscl = float_kw(default=1.0, comment='Scale for sinc interpolation kernel')

[STEP 6: REMOVE COSMIC RAYS WITH DERIV, DRIZ_CR]
driz_cr = boolean_kw(default=True, triggers='_section_switch_', comment='Perform CR rejection with deriv and driz_cr?')
driz_cr_corr = boolean_kw(default=False, comment='Create CR cleaned _cor file and a _crmask file?')
driz_cr_snr = string_kw(default="3.5 3.0", comment='Driz_cr.SNR parameter')
driz_cr_grow = integer_kw(default=1, comment='Driz_cr_grow parameter')
driz_cr_ctegrow = integer_kw(default=0, comment='Driz_cr_ctegrow parameter')
driz_cr_scale = string_kw(default="1.2 0.7", comment='Driz_cr.scale parameter')

[STEP 7: DRIZZLE FINAL COMBINED IMAGE]
driz_combine = boolean_kw(default=True, triggers='_section_switch_', comment='Perform final drizzle image combination?')
final_wht_type = option_kw("EXP","ERR","IVM",default="EXP", comment='Type of weighting for final drizzle')
final_outnx = float_or_none_kw(default=None, comment='Size of FINAL output frame X-axis (pixels)')
final_outny = float_or_none_kw(default=None, comment='Size of FINAL output frame Y-axis (pixels)')
final_kernel = option_kw("square","point","gaussian","turbo","tophat","lanczos3",default="square", comment='Shape of kernel function')
final_pixfrac = float_kw(default=1., comment='Linear size of drop in input pixels')
final_rot = float_kw(default=0., comment="Position Angle of drizzled image's Y-axis w.r.t. North (degrees)")
final_fillval = string_kw(default="INDEF", comment='Value to be assigned to undefined output points')
final_bits = integer_kw(default=0, comment='Integer mask bit values considered good')
final_units = option_kw("counts", "cps", default="cps", comment='Units for final drizzle image (counts or cps)')
final_scale = float_or_none_kw(default=None, comment='')

[_RULES_]
# Special strings here are 'OUT' and 'VAL'.
_rule1_ = string_kw(default='', code='from pytools.parseinput import parseinput; OUT = len(parseinput(VAL)[0]) > 1')
